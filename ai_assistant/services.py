import requests
import json
import base64
import time
from django.conf import settings
from django.utils.translation import gettext as _
from .models import AIUsageStats


class GeminiAIService:
    """ุฎุฏูุฉ ุงูุชูุงูู ูุน Gemini AI"""

    def __init__(self):
        self.api_key = getattr(settings, 'GEMINI_API_KEY', 'AIzaSyC5lLrmkNpz-WipRo4U1NcAw5v7pzQTu7o')
        self.api_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
        
    def _prepare_headers(self):
        """ุชุญุถูุฑ headers ููุทูุจ"""
        return {
            'Content-Type': 'application/json',
        }
    
    def _prepare_text_payload(self, message, conversation_history=None):
        """ุชุญุถูุฑ ุงูุจูุงูุงุช ููุฑุณุงุฆู ุงููุตูุฉ"""

        # ุฅุถุงูุฉ ุงูุณูุงู ุงูุนุฑุจู ูุงูุชุนูููุงุช ุงูุฃุณุงุณูุฉ
        system_prompt = """ุฃูุช ูุณุงุนุฏ ุฐูู ูุชุฎุตุต ูู ุฅุฏุงุฑุฉ ุงูููุงู ุงูููููุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ. ุชุณุงุนุฏ ุงููุณุชุฎุฏููู ูู:

๐ฏ **ููุงูู ุงูุฃุณุงุณูุฉ:**
1. **ุชูุธูู ุงูููุงู**: ุชุญููู ุงูุฃููุงุฑ ุฅูู ููุงู ูุงุถุญุฉ ูููุธูุฉ
2. **ุญู ุงููุงุฌุจุงุช**: ูุณุงุนุฏุฉ ูู ุงููุงุฌุจุงุช ุงูุฏุฑุงุณูุฉ ูุงูุฃุณุฆูุฉ ุงูุตุนุจุฉ
3. **ุงูุชุฑุงุญุงุช ุฐููุฉ**: ุชูุฏูู ุญููู ุฅุจุฏุงุนูุฉ ูููุดุงูู ุงูููููุฉ
4. **ุชุญููู ุงูุตูุฑ**: ููู ูุชุญููู ุงูุตูุฑ ูุงููุณุชูุฏุงุช
5. **ุงูุชุฎุทูุท**: ูุณุงุนุฏุฉ ูู ุงูุชุฎุทูุท ุงููููู ูุงูุฃุณุจูุนู

๐ก **ุฃุณููุจู:**
- ุชุญุฏุซ ุจุงูุนุฑุจูุฉ ุจุดูู ุทุจูุนู ูููููู
- ูู ูููุฏุงู ููุชุนุงููุงู
- ุงุนุทู ุฅุฌุงุจุงุช ูุงุถุญุฉ ูููุตูุฉ
- ุงูุชุฑุญ ููุงู ุนูููุฉ ุนูุฏ ุงูุญุงุฌุฉ

๐ **ุงุจุฏุฃ ุจุงููุณุงุนุฏุฉ!**"""

        # ุจูุงุก ุงููุญุชูู
        full_message = f"{system_prompt}\n\n**ุณุคุงู ุงููุณุชุฎุฏู:** {message}"

        # ุฅุถุงูุฉ ุงูุณูุงู ูู ุงููุญุงุฏุซุฉ ุงูุณุงุจูุฉ
        if conversation_history and conversation_history.exists():
            context = "\n\n**ุงูุณูุงู ูู ุงููุญุงุฏุซุฉ ุงูุณุงุจูุฉ:**\n"
            # ุงูุญุตูู ุนูู ุขุฎุฑ 3 ุฑุณุงุฆู ุจุทุฑููุฉ ุขููุฉ
            recent_messages = list(conversation_history.order_by('-created_at')[:3])
            recent_messages.reverse()  # ุชุฑุชูุจ ูู ุงูุฃูุฏู ููุฃุญุฏุซ
            for msg in recent_messages:
                role = "ุงููุณุชุฎุฏู" if msg.message_type == "user" else "ุงููุณุงุนุฏ"
                context += f"{role}: {msg.content[:200]}...\n"
            full_message = context + "\n" + full_message

        return {
            "contents": [
                {
                    "parts": [
                        {
                            "text": full_message
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.8,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 2048,
                "stopSequences": []
            },
            "safetySettings": [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        }
    
    def _prepare_image_payload(self, message, image_data, conversation_history=None):
        """ุชุญุถูุฑ ุงูุจูุงูุงุช ููุฑุณุงุฆู ุงูุชู ุชุญุชูู ุนูู ุตูุฑ"""

        # ุชุญููู ููุน ุงูุทูุจ ูุชุฎุตูุต ุงูุชุญููู
        message_lower = message.lower()

        if any(word in message_lower for word in ['ูุธู', 'ุฑุชุจ', 'ููุงู', 'ุฌุฏูู', 'ููุช', 'organize', 'schedule']):
            system_prompt = """๐ **ุฎุจูุฑ ุชุญููู ุงูุฌุฏุงูู ูุงูููุงู ูู ุงูุตูุฑ**

ุฃูุช ูุชุฎุตุต ูู ุชุญููู ุงูุตูุฑ ูุงุณุชุฎุฑุงุฌ ุงูููุงู ูุงูุฌุฏุงูู ุงูุฒูููุฉ. ููุงูู:

๐ **ุชุญููู ุงูุตูุฑุฉ:**
- ุงูุฑุฃ ุฌููุน ุงููุตูุต ูู ุงูุตูุฑุฉ ุจุฏูุฉ ุนุงููุฉ
- ุงุณุชุฎุฑุฌ ุงูููุงู ูุงูุฃูุดุทุฉ ุงููุฐููุฑุฉ
- ุญุฏุฏ ุงูุฃููุงุช ูุงูููุงุนูุฏ ุฅู ูุฌุฏุช
- ูุงุญุธ ุฃู ููุงุญุธุงุช ุฃู ุชูุงุตูู ุฅุถุงููุฉ

๐ **ุชูุธูู ุงูููุงู:**
- ุฑุชุจ ุงูููุงู ุญุณุจ ุงูุฃููููุฉ ูุงูููุช
- ุงูุชุฑุญ ุฃููุงุช ููุงุณุจุฉ ููููุงู ุบูุฑ ุงููุญุฏุฏุฉ
- ุฃูุดุฆ ุฌุฏูู ุฒููู ููุทูู ููุชูุงุฒู
- ุฑุงุนู ูุชุฑุงุช ุงูุฑุงุญุฉ ูุงููุฌุจุงุช

โฐ **ุชูุณูู ุงูุฌุฏูู:**
```
๐ **ุฌุฏูู ุงูููุงู ุงููุณุชุฎุฑุฌ ูู ุงูุตูุฑุฉ**

๐ **ุงูุตุจุงุญ (6:00 - 12:00)**
โฐ [ุงูููุช] | [ุฑูุฒ] [ุงุณู ุงููููุฉ] - [ุชูุงุตูู]

๐ **ุจุนุฏ ุงูุธูุฑ (12:00 - 18:00)**
โฐ [ุงูููุช] | [ุฑูุฒ] [ุงุณู ุงููููุฉ] - [ุชูุงุตูู]

๐ **ุงููุณุงุก (18:00 - 22:00)**
โฐ [ุงูููุช] | [ุฑูุฒ] [ุงุณู ุงููููุฉ] - [ุชูุงุตูู]
```

๐ก **ูุตุงุฆุญ ุฅุถุงููุฉ:**
- ุงูุชุฑุญ ุชุญุณููุงุช ุนูู ุงูุฌุฏูู
- ุฃุถู ููุงู ูููุฉ ูุฏ ุชููู ููููุฏุฉ
- ูุฏู ูุตุงุฆุญ ูุชุญุณูู ุงูุฅูุชุงุฌูุฉ"""

        elif any(word in message_lower for word in ['ุญู', 'ูุงุฌุจ', 'ูุณุฃูุฉ', 'ุณุคุงู', 'homework', 'solve']):
            system_prompt = """๐ **ุฎุจูุฑ ุชุญููู ุงููุงุฌุจุงุช ูุงููุณุงุฆู ูู ุงูุตูุฑ**

ุฃูุช ูุฏุฑุณ ุฐูู ูุชุฎุตุต ูู ุชุญููู ุงููุงุฌุจุงุช ูุงููุณุงุฆู ูู ุงูุตูุฑ. ููุงูู:

๐ **ูุฑุงุกุฉ ุฏูููุฉ:**
- ุงูุฑุฃ ุฌููุน ุงููุตูุต ูุงูุฃุฑูุงู ุจุนูุงูุฉ ูุงุฆูุฉ
- ุญุฏุฏ ููุน ุงููุณุฃูุฉ ุฃู ุงููุงุฌุจ
- ุงุณุชุฎุฑุฌ ุฌููุน ุงููุนุทูุงุช ูุงููุทููุจ

๐ **ุชุญููู ุงููุญุชูู:**
- ุญุฏุฏ ุงููุงุฏุฉ ุงูุฏุฑุงุณูุฉ (ุฑูุงุถูุงุชุ ุนูููุ ูุบุฉ...)
- ุงุดุฑุญ ุงูููุงููู ุงููุทููุจุฉ
- ุญุฏุฏ ุฎุทูุงุช ุงูุญู ุงููุทููุจุฉ

โ **ุชูุฏูู ุงูุญู:**
- ุงุดุฑุญ ุงูุญู ุฎุทูุฉ ุจุฎุทูุฉ
- ูุถุญ ูู ุฎุทูุฉ ุจุงูุชูุตูู
- ูุฏู ุงูุฅุฌุงุจุฉ ุงูููุงุฆูุฉ ุจูุถูุญ
- ุฃุถู ูุตุงุฆุญ ูููู ุฃูุถู

๐ฏ **ุฃุณููุจ ุงูุชุนููู:**
- ุงุณุชุฎุฏู ูุบุฉ ุจุณูุทุฉ ููููููุฉ
- ูุฏู ุฃูุซูุฉ ุฅุถุงููุฉ ุนูุฏ ุงูุญุงุฌุฉ
- ุชุฃูุฏ ูู ุงูููู ูุจู ุงูุงูุชูุงู
- ุดุฌุน ุนูู ุงูุชุนูู ูุงูุงุณุชูุดุงู"""

        else:
            system_prompt = """๐ผ๏ธ **ูุญูู ุงูุตูุฑ ุงูุฐูู ุงููุชุทูุฑ**

ุฃูุช ุฎุจูุฑ ูุชูุฏู ูู ุชุญููู ุงูุตูุฑ ุจุฌููุน ุฃููุงุนูุง. ููุงูู:

๐ **ุชุญููู ุดุงูู:**
- ูุตู ุฏููู ูููุตู ููุญุชูู ุงูุตูุฑุฉ
- ุชุญุฏูุฏ ุฌููุน ุงูุนูุงุตุฑ ูุงูุชูุงุตูู ุงููููุฉ
- ูุฑุงุกุฉ ุฃู ูุตูุต ุฃู ูุชุงุจุงุช ููุฌูุฏุฉ
- ุชุญููู ุงูุฃููุงู ูุงูุฃุดูุงู ูุงูุฑููุฒ

๐ **ุงุณุชุฎุฑุงุฌ ุงููุนูููุงุช:**
- ุงุณุชุฎุฑุฌ ุฃู ูุนูููุงุช ูููุฏุฉ
- ุญุฏุฏ ุงูุณูุงู ูุงูุบุฑุถ ูู ุงูุตูุฑุฉ
- ุงุฑุจุท ุงููุญุชูู ุจุงูุทูุจ ุงููุญุฏุฏ
- ูุฏู ุชูุณูุฑุงุช ููุทููุฉ

๐ก **ุชูุฏูู ุงููุณุงุนุฏุฉ:**
- ุฃุฌุจ ุนูู ุงูุณุคุงู ุงููุทุฑูุญ ุจุฏูุฉ
- ุงูุชุฑุญ ุญููู ุฃู ุชูุณูุฑุงุช ุฅุถุงููุฉ
- ูุฏู ูุนูููุงุช ุฐุงุช ุตูุฉ
- ุณุงุนุฏ ูู ููู ุงููุญุชูู ุจุดูู ุฃูุถู

๐จ **ุฃุณููุจ ุงูุชุญููู:**
- ูู ุฏูููุงู ูููุตูุงู ูู ุงููุตู
- ุงุณุชุฎุฏู ูุบุฉ ูุงุถุญุฉ ููููููุฉ
- ูุธู ุงููุนูููุงุช ุจุทุฑููุฉ ููุทููุฉ
- ูุฏู ุชุญููู ุดุงูู ููููุฏ"""

        # ุชุญููู ุงูุตูุฑุฉ ุฅูู base64
        image_base64 = base64.b64encode(image_data).decode('utf-8')

        # ุจูุงุก ุงูุฑุณุงูุฉ ูุน ุงูุตูุฑุฉ
        full_message = f"{system_prompt}\n\n**ุทูุจ ุงููุณุชุฎุฏู:** {message}\n\n**ูุฑุฌู ุชุญููู ุงูุตูุฑุฉ ุงููุฑููุฉ ูุงูุฅุฌุงุจุฉ ุนูู ุงูุณุคุงู.**"

        return {
            "contents": [
                {
                    "parts": [
                        {
                            "text": full_message
                        },
                        {
                            "inline_data": {
                                "mime_type": "image/jpeg",
                                "data": image_base64
                            }
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.7,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 2048,
            },
            "safetySettings": [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        }
    
    def send_message(self, message, user, image_data=None, conversation_history=None):
        """ุฅุฑุณุงู ุฑุณุงูุฉ ุฅูู Gemini AI ูุน ุญู ุจุฏูู ูุญูู"""

        # ูุญุงููุฉ ุงุณุชุฎุฏุงู Gemini AI ุฃููุงู
        try:
            start_time = time.time()

            # ุชุญุถูุฑ ุงูุจูุงูุงุช
            if image_data:
                payload = self._prepare_image_payload(message, image_data, conversation_history)
            else:
                payload = self._prepare_text_payload(message, conversation_history)

            # ุฅุฑุณุงู ุงูุทูุจ
            url = f"{self.api_url}?key={self.api_key}"
            headers = self._prepare_headers()

            print(f"๐ ุฅุฑุณุงู ุทูุจ ุฅูู Gemini API: {url}")
            print(f"๐ ูุญุชูู ุงูุฑุณุงูุฉ: {message[:100]}...")

            response = requests.post(url, headers=headers, json=payload, timeout=15)
            response_time = time.time() - start_time

            print(f"๐ ููุฏ ุงูุงุณุชุฌุงุจุฉ: {response.status_code}")
            print(f"โฑ๏ธ ููุช ุงูุงุณุชุฌุงุจุฉ: {response_time:.2f} ุซุงููุฉ")

            if response.status_code == 200:
                data = response.json()
                print(f"๐ฆ ุจูุงูุงุช ุงูุงุณุชุฌุงุจุฉ: {str(data)[:200]}...")

                # ุงุณุชุฎุฑุงุฌ ุงููุต ูู ุงูุงุณุชุฌุงุจุฉ
                if 'candidates' in data and len(data['candidates']) > 0:
                    candidate = data['candidates'][0]
                    if 'content' in candidate and 'parts' in candidate['content']:
                        ai_response = candidate['content']['parts'][0]['text']

                        print(f"โ ุชู ุงูุญุตูู ุนูู ุงุณุชุฌุงุจุฉ: {ai_response[:100]}...")

                        # ุชุญุฏูุซ ุฅุญุตุงุฆูุงุช ุงูุงุณุชุฎุฏุงู
                        self._update_usage_stats(user, response_time, image_data is not None)

                        return {
                            'success': True,
                            'response': ai_response,
                            'response_time': response_time,
                            'tokens_used': self._estimate_tokens(message + ai_response)
                        }
                    else:
                        print("โ ุจููุฉ ุงูุงุณุชุฌุงุจุฉ ุบูุฑ ุตุญูุญุฉ - ูุง ุชูุฌุฏ ุฃุฌุฒุงุก")
                else:
                    print("โ ุจููุฉ ุงูุงุณุชุฌุงุจุฉ ุบูุฑ ุตุญูุญุฉ - ูุง ุชูุฌุฏ ูุฑุดุญูู")

                return {
                    'success': False,
                    'error': _('ูู ูุชู ุงูุญุตูู ุนูู ุงุณุชุฌุงุจุฉ ุตุญูุญุฉ ูู ุงููุณุงุนุฏ ุงูุฐูู'),
                    'response_time': response_time,
                    'raw_response': data
                }

            else:
                error_msg = _('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงููุณุงุนุฏ ุงูุฐูู')
                error_details = ""

                try:
                    error_data = response.json()
                    error_details = str(error_data)
                    print(f"โ ุชูุงุตูู ุงูุฎุทุฃ: {error_details}")
                except:
                    error_details = response.text
                    print(f"โ ูุต ุงูุฎุทุฃ: {error_details}")

                if response.status_code == 400:
                    error_msg = _('ุทูุจ ุบูุฑ ุตุญูุญ - ุชุญูู ูู ุงูุจูุงูุงุช ุงููุฑุณูุฉ')
                elif response.status_code == 401:
                    error_msg = _('ููุชุงุญ API ุบูุฑ ุตุญูุญ ุฃู ููุชูู ุงูุตูุงุญูุฉ')
                elif response.status_code == 403:
                    error_msg = _('ููุณ ูุฏูู ุตูุงุญูุฉ ูููุตูู ููุฐู ุงูุฎุฏูุฉ')
                elif response.status_code == 429:
                    error_msg = _('ุชู ุชุฌุงูุฒ ุงูุญุฏ ุงููุณููุญ ูู ุงูุทูุจุงุช - ุญุงูู ูุงุญูุงู')
                elif response.status_code == 500:
                    error_msg = _('ุฎุทุฃ ูู ุฎุงุฏู Google - ุญุงูู ูุงุญูุงู')
                elif response.status_code == 503:
                    print("๐ ุงูุฎุงุฏู ูุญูู ุจุดุฏุฉุ ุงูุชุจุฏูู ุฅูู ุงููุณุงุนุฏ ุงููุญูู...")
                    return self._local_assistant_response(message, user, image_data)

                return {
                    'success': False,
                    'error': error_msg,
                    'status_code': response.status_code,
                    'response_time': response_time,
                    'error_details': error_details
                }

        except requests.exceptions.Timeout:
            print("โฐ ุงูุชูุช ูููุฉ ุงูุงุชุตุงู")
            return {
                'success': False,
                'error': _('ุงูุชูุช ูููุฉ ุงูุงุชุตุงู ุจุงููุณุงุนุฏ ุงูุฐูู - ุญุงูู ูุฑุฉ ุฃุฎุฑู')
            }
        except requests.exceptions.ConnectionError:
            print("๐ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช")
            return {
                'success': False,
                'error': _('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช - ุชุญูู ูู ุงุชุตุงูู')
            }
        except requests.exceptions.RequestException as e:
            print(f"๐ ุฎุทุฃ ูู ุงูุทูุจ: {str(e)}")
            return {
                'success': False,
                'error': _('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุทูุจ ูููุณุงุนุฏ ุงูุฐูู')
            }
        except json.JSONDecodeError as e:
            print(f"๐ฆ ุฎุทุฃ ูู ุชุญููู ุงุณุชุฌุงุจุฉ JSON: {str(e)}")
            return {
                'success': False,
                'error': _('ุฎุทุฃ ูู ุชุญููู ุงุณุชุฌุงุจุฉ ุงููุณุงุนุฏ ุงูุฐูู')
            }
        except Exception as e:
            print(f"๐ฅ ุฎุทุฃ ูู Gemini API: {str(e)}")
            print("๐ ุงูุชุจุฏูู ุฅูู ุงููุณุงุนุฏ ุงููุญูู...")

            # ุงุณุชุฎุฏุงู ุงููุณุงุนุฏ ุงููุญูู ูุญู ุจุฏูู
            return self._local_assistant_response(message, user, image_data)

    def _local_assistant_response(self, message, user, image_data=None):
        """ูุณุงุนุฏ ุฐูู ูุญูู ูุญู ุจุฏูู"""

        start_time = time.time()

        # ุฅุฐุง ูุงูุช ููุงู ุตูุฑุฉุ ููุฏู ุงุณุชุฌุงุจุฉ ุฎุงุตุฉ ุจุงูุตูุฑ
        if image_data:
            return self._handle_image_locally(message, user, image_data, start_time)

        # ุชุญููู ุงูุฑุณุงูุฉ ูุชูุฏูู ุงุณุชุฌุงุจุฉ ุฐููุฉ
        message_lower = message.lower()

        # ุงุณุชุฌุงุจุงุช ููุชุฑุญูุจ
        if any(word in message_lower for word in ['ูุฑุญุจุง', 'ุงูุณูุงู', 'ุฃููุง', 'hello', 'hi']):
            response = f"""ูุฑุญุจุงู {user.first_name}! ๐

ุฃูุง ูุณุงุนุฏู ุงูุฐูู ูุฅุฏุงุฑุฉ ุงูููุงู. ูููููู ูุณุงุนุฏุชู ูู:

๐ฏ **ุชูุธูู ุงูููุงู**: ุชุญููู ุฃููุงุฑู ุฅูู ููุงู ูุงุถุญุฉ
๐ **ุญู ุงููุงุฌุจุงุช**: ูุณุงุนุฏุฉ ูู ุงูุฏุฑุงุณุฉ ูุงูุฃุณุฆูุฉ
๐ก **ุงูุชุฑุงุญุงุช ุฐููุฉ**: ุญููู ูููุดุงูู ุงูููููุฉ
๐ **ุงูุชุฎุทูุท**: ุชูุธูู ููุชู ุจูุนุงููุฉ

ููู ูููููู ูุณุงุนุฏุชู ุงููููุ"""

        # ุงุณุชุฌุงุจุงุช ูุชูุธูู ุงูููุงู
        elif any(word in message_lower for word in ['ูุธู', 'ุฑุชุจ', 'ููุงู', 'organize', 'tasks']):
            # ุงุณุชุฎุฑุงุฌ ุงูููุงู ูู ุงููุต
            import re

            # ุงูุจุญุซ ุนู ุงูููุงู ูู ุงููุต
            tasks_found = []
            task_patterns = [
                r'(?:ูููุฉ|ููุงู|task|todo)[\s:]*([^ุ.]+)',
                r'(?:ูุฌุจ|ููุจุบู|need to|should)[\s]*([^ุ.]+)',
                r'(?:ุฃุฑูุฏ|ุฃูุฏ|want to|wish to)[\s]*([^ุ.]+)',
            ]

            for pattern in task_patterns:
                matches = re.findall(pattern, message, re.IGNORECASE)
                tasks_found.extend(matches)

            # ุฅุฐุง ูู ูุฌุฏ ููุงู ูุญุฏุฏุฉุ ููุฏู ูุซุงู ุนุงู
            if not tasks_found:
                response = f"""๐ **ูุฑุญุจุงู {user.first_name}! ุฏุนูู ุฃุณุงุนุฏู ูู ุชูุธูู ููุงูู**

ูู ุฃุฌุฏ ููุงู ูุญุฏุฏุฉ ูู ุฑุณุงูุชู. ุฅููู ูุซุงู ุนูู ููููุฉ ุชูุธูู ุงูููุงู:

๐ **ุฌุฏูู ููู ูุซุงูู**

๐ **ุงูุตุจุงุญ (6:00 - 12:00)**
โฐ 7:00 - 8:00 | ๐โโ๏ธ ููุงุฑุณุฉ ุงูุฑูุงุถุฉ
โฐ 8:00 - 9:00 | ๐ณ ุงูุฅูุทุงุฑ ูุงูุงุณุชุนุฏุงุฏ
โฐ 9:00 - 11:00 | ๐ ุฏุฑุงุณุฉ ุฃู ุนูู ููู (ุชุฑููุฒ ุนุงูู)
โฐ 11:00 - 12:00 | โ ุงุณุชุฑุงุญุฉ ูุชุญุถูุฑ ููุบุฏุงุก

๐ **ุจุนุฏ ุงูุธูุฑ (12:00 - 18:00)**
โฐ 12:00 - 13:00 | ๐ฝ๏ธ ุงูุบุฏุงุก
โฐ 13:00 - 15:00 | ๐ผ ููุงู ุงูุนูู ุฃู ุงููุดุงุฑูุน
โฐ 15:00 - 16:00 | ๐ ุงูููุงู ุงูุฎุงุฑุฌูุฉ (ุชุณููุ ููุงุนูุฏ)
โฐ 16:00 - 18:00 | ๐ ูุฑุงุฌุนุฉ ุฃู ููุงู ุฅุถุงููุฉ

๐ **ุงููุณุงุก (18:00 - 22:00)**
โฐ 18:00 - 19:00 | ๐ฝ๏ธ ุงูุนุดุงุก ูุน ุงูุนุงุฆูุฉ
โฐ 19:00 - 21:00 | ๐ฏ ููุงูุงุช ุฃู ููุช ุดุฎุตู
โฐ 21:00 - 22:00 | ๐ฑ ุงุณุชุฑุฎุงุก ููุฑุงุฌุนุฉ ุงูููู

๐ก **ูุตุงุฆุญ ุฐูุจูุฉ:**
- ุงุจุฏุฃ ุจุงูููุงู ุงูุตุนุจุฉ ูู ุงูุตุจุงุญ
- ุฎุฐ ุงุณุชุฑุงุญุฉ ูู ุณุงุนุชูู
- ุงุชุฑู ููุช ููุทูุงุฑุฆ
- ุฑุงุฌุน ุฅูุฌุงุฒุงุชู ูู ููุงูุฉ ุงูููู

**ุฃุฎุจุฑูู ุจููุงูู ุงููุญุฏุฏุฉ ูุณุฃูุธููุง ูู ุจุดูู ูุซุงูู!**"""
            else:
                # ุชูุธูู ุงูููุงู ุงููุณุชุฎุฑุฌุฉ
                organized_tasks = []
                for i, task in enumerate(tasks_found[:8], 1):  # ุฃูุตู 8 ููุงู
                    clean_task = task.strip()
                    if len(clean_task) > 3:
                        organized_tasks.append(f"{i}. **{clean_task}**")

                response = f"""๐ **ุฌุฏูู ููุงูู ุงูููุธู - {user.first_name}**

ุงุณุชุฎุฑุฌุช ุงูููุงู ุงูุชุงููุฉ ูู ุฑุณุงูุชู:

๐ฏ **ุงูููุงู ุงููุญุฏุฏุฉ:**
{chr(10).join(organized_tasks)}

๐ **ุฌุฏูู ุฒููู ููุชุฑุญ:**

๐ **ุงูุตุจุงุญ (7:00 - 12:00)**
โฐ 7:00 - 8:00 | ๐โโ๏ธ ููุงุฑุณุฉ ุงูุฑูุงุถุฉ ูุงูุฅูุทุงุฑ
โฐ 8:00 - 10:00 | ๐ {organized_tasks[0].split('**')[1] if organized_tasks else 'ุงููููุฉ ุงูุฃููู'}
โฐ 10:00 - 12:00 | ๐ผ {organized_tasks[1].split('**')[1] if len(organized_tasks) > 1 else 'ุงููููุฉ ุงูุซุงููุฉ'}

๐ **ุจุนุฏ ุงูุธูุฑ (12:00 - 18:00)**
โฐ 12:00 - 13:00 | ๐ฝ๏ธ ุงูุบุฏุงุก ูุงุณุชุฑุงุญุฉ
โฐ 13:00 - 15:00 | ๐ฏ {organized_tasks[2].split('**')[1] if len(organized_tasks) > 2 else 'ุงููููุฉ ุงูุซุงูุซุฉ'}
โฐ 15:00 - 17:00 | โก {organized_tasks[3].split('**')[1] if len(organized_tasks) > 3 else 'ุงููููุฉ ุงูุฑุงุจุนุฉ'}
โฐ 17:00 - 18:00 | ๐ ููุงู ุฎุงุฑุฌูุฉ ุฃู ุงุณุชุฑุงุญุฉ

๐ **ุงููุณุงุก (18:00 - 22:00)**
โฐ 18:00 - 19:00 | ๐ฝ๏ธ ุงูุนุดุงุก
โฐ 19:00 - 21:00 | ๐ {organized_tasks[4].split('**')[1] if len(organized_tasks) > 4 else 'ูุฑุงุฌุนุฉ ุฃู ุงุณุชุฑุฎุงุก'}
โฐ 21:00 - 22:00 | ๐ฎ ููุช ุดุฎุตู

๐ก **ูุตุงุฆุญ ูุฎุตุตุฉ ูู:**
- ุฑุชุจุช ุงูููุงู ุญุณุจ ูุณุชูู ุงูุทุงูุฉ ุงููุทููุจ
- ุงูููุงู ุงูุฐูููุฉ ูู ุงูุตุจุงุญ ุนูุฏูุง ูููู ุงูุชุฑููุฒ ุฃุนูู
- ุงูููุงู ุงูุนูููุฉ ูู ุจุนุฏ ุงูุธูุฑ
- ููุช ููุงุณุชุฑุฎุงุก ูู ุงููุณุงุก

ูู ุชุฑูุฏ ุชุนุฏูู ูุฐุง ุงูุฌุฏูู ุฃู ุฅุถุงูุฉ ุชูุงุตูู ุฃูุซุฑุ"""

        # ุงุณุชุฌุงุจุงุช ูุญู ุงููุงุฌุจุงุช
        elif any(word in message_lower for word in ['ุญู', 'ูุงุฌุจ', 'ูุณุฃูุฉ', 'solve', 'homework', 'ร', '*', '+', '-', 'รท']):
            # ุงูุจุญุซ ุนู ุนูููุงุช ุญุณุงุจูุฉ
            import re
            math_pattern = r'(\d+)\s*[ร*]\s*(\d+)'
            match = re.search(math_pattern, message)

            if match:
                num1, num2 = int(match.group(1)), int(match.group(2))
                result = num1 * num2
                response = f"""๐งฎ **ุญู ุงููุณุฃูุฉ ุงูุฑูุงุถูุฉ**

ุงููุณุฃูุฉ: {num1} ร {num2} = ุ

**ุงูุญู ุฎุทูุฉ ุจุฎุทูุฉ:**
1. ูุถุฑุจ {num1} ูู {num2}
2. {num1} ร {num2} = {result}

**ุงูุฅุฌุงุจุฉ ุงูููุงุฆูุฉ: {result}** โ

๐ก **ูุตูุญุฉ**: ููููู ุงุณุชุฎุฏุงู ุฌุฏูู ุงูุถุฑุจ ุฃู ุงูุขูุฉ ุงูุญุงุณุจุฉ ููุชุฃูุฏ ูู ุงููุชูุฌุฉ!"""
            else:
                response = """๐ **ูุณุงุนุฏุฉ ูู ุงููุงุฌุจุงุช**

ุฃูุง ููุง ููุณุงุนุฏุชู! ูููููู:

๐งฎ **ุงูุฑูุงุถูุงุช**: ุญู ุงููุนุงุฏูุงุช ูุงูุนูููุงุช ุงูุญุณุงุจูุฉ
๐ **ุงูุนููู**: ุดุฑุญ ุงูููุงููู ุงูุนูููุฉ
๐ **ุงููุบุฉ**: ูุณุงุนุฏุฉ ูู ุงูููุงุนุฏ ูุงูุฅููุงุก
๐ **ุงูุฌุบุฑุงููุง**: ูุนูููุงุช ุนู ุงูุจูุฏุงู ูุงููุงุฑุงุช

ุงูุชุจ ุณุคุงูู ุจูุถูุญ ูุณุฃุณุงุนุฏู ูู ุญูู ุฎุทูุฉ ุจุฎุทูุฉ!"""

        # ุงุณุชุฌุงุจุงุช ููุงูุชุฑุงุญุงุช
        elif any(word in message_lower for word in ['ุงูุชุฑุญ', 'ูุตูุญุฉ', 'ุณุงุนุฏ', 'suggest', 'help']):
            response = """๐ก **ุงูุชุฑุงุญุงุช ุฐููุฉ ูุชุญุณูู ุฅูุชุงุฌูุชู**

**โฐ ุฅุฏุงุฑุฉ ุงูููุช:**
- ุงุณุชุฎุฏู ุชูููุฉ ุงูุจูููุฏูุฑู (25 ุฏูููุฉ ุนูู + 5 ุฏูุงุฆู ุฑุงุญุฉ)
- ุญุฏุฏ ุฃูุฏุงูุงู ููููุฉ ูุงุถุญุฉ
- ุชุฌูุจ ุงููุดุชุชุงุช ุฃุซูุงุก ุงูุนูู

**๐ ุชูุธูู ุงูููุงู:**
- ุงูุชุจ ููุงูู ูู ูุงุฆูุฉ ูุงุถุญุฉ
- ุฑุชุจูุง ุญุณุจ ุงูุฃููููุฉ ูุงูููุนุฏ ุงูููุงุฆู
- ูุณู ุงูููุงู ุงููุจูุฑุฉ ุฅูู ุฎุทูุงุช ุตุบูุฑุฉ

**๐ฏ ุชุญุณูู ุงูุชุฑููุฒ:**
- ุงุฎุชุฑ ููุงู ูุงุฏุฆ ููุฏุฑุงุณุฉ
- ุฃุบูู ุงููุงุชู ุฃุซูุงุก ุงูุนูู ุงูููู
- ุฎุฐ ูุชุฑุงุช ุฑุงุญุฉ ููุชุธูุฉ

**๐ช ุงูุญูุงุธ ุนูู ุงูุทุงูุฉ:**
- ูู 7-8 ุณุงุนุงุช ููููุงู
- ุงุดุฑุจ ุงููุงุก ุจุงูุชุธุงู
- ูุงุฑุณ ุงูุฑูุงุถุฉ 30 ุฏูููุฉ ููููุงู

ุฃู ูู ูุฐู ุงููุตุงุฆุญ ุชุฑูุฏ ุงูุชูุตูู ูููุง ุฃูุซุฑุ"""

        # ุงุณุชุฌุงุจุฉ ุงูุชุฑุงุถูุฉ
        else:
            response = f"""ูุฑุญุจุงู {user.first_name}! ๐ค

ูููุช ุฑุณุงูุชู ูุฃูุฏุฑ ุซูุชู ุจู. ููุณุงุนุฏ ุฐููุ ูููููู ูุณุงุนุฏุชู ูู:

๐ฏ **ุชูุธูู ุงูููุงู**: ูู "ูุธู ููุงูู" ูุฃุฎุจุฑูู ุจููุงูู
๐ **ุญู ุงููุงุฌุจุงุช**: ุงูุชุจ ุณุคุงูู ูุณุฃุณุงุนุฏู ูู ุญูู
๐ก **ุงูุชุฑุงุญุงุช**: ูู "ุงูุชุฑุญ ุนูู" ูุณุฃุนุทูู ูุตุงุฆุญ ูููุฏุฉ
๐ **ุงูุชุฎุทูุท**: ุณุงุนุฏู ูู ุชูุธูู ูููู ุฃู ุฃุณุจูุนู

**ูุซุงู**: "ูุธู ููุงูู: ุฏุฑุงุณุฉ ุงูุฑูุงุถูุงุชุ ุดุฑุงุก ุงูุจูุงูุฉุ ููุงุฑุณุฉ ุงูุฑูุงุถุฉ"

ููู ูููููู ูุณุงุนุฏุชู ุจุดูู ุฃูุซุฑ ุชุญุฏูุฏุงูุ"""

        response_time = time.time() - start_time

        # ุชุญุฏูุซ ุฅุญุตุงุฆูุงุช ุงูุงุณุชุฎุฏุงู
        self._update_usage_stats(user, response_time, image_data is not None)

        return {
            'success': True,
            'response': response,
            'response_time': response_time,
            'tokens_used': self._estimate_tokens(message + response),
            'source': 'local_assistant'
        }
    
    def _estimate_tokens(self, text):
        """ุชูุฏูุฑ ุนุฏุฏ ุงูุฑููุฒ ุงููุณุชุฎุฏูุฉ"""
        # ุชูุฏูุฑ ุชูุฑูุจู: ูู 4 ุฃุญุฑู = ุฑูุฒ ูุงุญุฏ
        return len(text) // 4
    
    def _update_usage_stats(self, user, response_time, has_image=False):
        """ุชุญุฏูุซ ุฅุญุตุงุฆูุงุช ุงูุงุณุชุฎุฏุงู"""
        try:
            stats, created = AIUsageStats.objects.get_or_create(user=user)
            stats.reset_daily_count()  # ุฅุนุงุฏุฉ ุชุนููู ุงูุนุฏุงุฏ ุงููููู ุฅุฐุง ูุฒู ุงูุฃูุฑ
            
            stats.total_messages += 1
            stats.daily_messages_count += 1
            
            if has_image:
                stats.total_images_analyzed += 1
            
            stats.save()
            
        except Exception as e:
            # ุชุณุฌูู ุงูุฎุทุฃ ูููู ูุง ูููู ุงูุนูููุฉ
            print(f"Error updating usage stats: {e}")
    
    def extract_task_suggestions(self, ai_response):
        """ุงุณุชุฎุฑุงุฌ ุงูุชุฑุงุญุงุช ุงูููุงู ูู ุงุณุชุฌุงุจุฉ ุงููุณุงุนุฏ ุงูุฐูู"""
        suggestions = []

        # ุงูุจุญุซ ุนู ูููุงุช ููุชุงุญูุฉ ุชุฏู ุนูู ุงูููุงู
        task_keywords = [
            'ูููุฉ:', 'ููุงู:', 'ูุฌุจ ุนููู:', 'ููุจุบู:', 'ุงูุชุฑุญ:', 'ุฎุทูุฉ:',
            'Task:', 'TODO:', 'Action:', 'Suggestion:', 'Step:', 'โ', '๐', '๐ฏ'
        ]

        # ุงูุจุญุซ ุนู ุฃููุงุท ุงูููุงุฆู ุงููุฑููุฉ ูุงูููุทูุฉ
        import re
        list_patterns = [
            r'^\d+\.\s*(.+)',  # 1. ูููุฉ
            r'^-\s*(.+)',      # - ูููุฉ
            r'^\*\s*(.+)',     # * ูููุฉ
            r'^โข\s*(.+)',      # โข ูููุฉ
        ]

        lines = ai_response.split('\n')
        for line in lines:
            line = line.strip()

            # ุงูุจุญุซ ุนู ุงููููุงุช ุงูููุชุงุญูุฉ
            for keyword in task_keywords:
                if keyword in line:
                    task_text = line.split(keyword, 1)[1].strip()
                    if task_text and len(task_text) > 5:
                        # ุชุญุฏูุฏ ุงูุฃููููุฉ ุจูุงุกู ุนูู ุงููููุงุช
                        priority = 'medium'
                        if any(word in task_text.lower() for word in ['ุนุงุฌู', 'ููู', 'urgent', 'important']):
                            priority = 'high'
                        elif any(word in task_text.lower() for word in ['ุจุณูุท', 'ุณูู', 'simple', 'easy']):
                            priority = 'low'

                        suggestions.append({
                            'title': task_text[:80],  # ุฃูู 80 ุญุฑู ูุนููุงู
                            'description': task_text,
                            'priority': priority
                        })
                    break

            # ุงูุจุญุซ ุนู ุงูุฃููุงุท ุงููุฑููุฉ ูุงูููุทูุฉ
            for pattern in list_patterns:
                match = re.match(pattern, line)
                if match:
                    task_text = match.group(1).strip()
                    if task_text and len(task_text) > 5:
                        # ุชูุธูู ุงููุต ูู ุงูุฑููุฒ ุงูุชุนุจูุฑูุฉ
                        clean_text = re.sub(r'[๐ฏ๐โ๐ฅ๐กโญ]', '', task_text).strip()
                        if clean_text:
                            suggestions.append({
                                'title': clean_text[:80],
                                'description': clean_text,
                                'priority': 'medium'
                            })
                    break

        # ุฅุฒุงูุฉ ุงูููุฑุฑุงุช
        unique_suggestions = []
        seen_titles = set()
        for suggestion in suggestions:
            if suggestion['title'].lower() not in seen_titles:
                seen_titles.add(suggestion['title'].lower())
                unique_suggestions.append(suggestion)

        return unique_suggestions[:5]  # ุฃูุตู 5 ุงูุชุฑุงุญุงุช

    def _handle_image_locally(self, message, user, image_data, start_time):
        """ูุนุงูุฌุฉ ุงูุตูุฑ ูุญููุงู ุนูุฏูุง ูุง ูุชููุฑ Gemini"""

        message_lower = message.lower()

        # ุชุญุฏูุฏ ููุน ุงูุทูุจ
        if any(word in message_lower for word in ['ูุธู', 'ุฑุชุจ', 'ููุงู', 'ุฌุฏูู', 'ููุช', 'organize', 'schedule']):
            response = f"""๐ **ุชุญููู ุงูุตูุฑุฉ ูุชูุธูู ุงูููุงู - {user.first_name}**

๐ผ๏ธ **ุชู ุงุณุชูุงู ุงูุตูุฑุฉ ุจูุฌุงุญ!**

ููุฃุณูุ ูุง ูููููู ูุฑุงุกุฉ ูุญุชูู ุงูุตูุฑุฉ ุญุงููุงู ุจุณุจุจ ุนุฏู ุชููุฑ ุฎุฏูุฉ ุงูุชุญููู ุงููุชูุฏูุฉ. ูููู ูููููู ูุณุงุนุฏุชู ุจุทุฑู ุฃุฎุฑู:

๐ **ูุง ูููููู ูุนูู:**
1. **ุงูุชุจ ุงูููุงู ูุตูุงู** - ุงูุณุฎ ุงูููุงู ูู ุงูุตูุฑุฉ ูุงูุชุจูุง ูู
2. **ุฃูุธู ุงูููุงู** - ุณุฃุฑุชุจูุง ูู ุฌุฏูู ุฒููู ูุซุงูู
3. **ุฃูุชุฑุญ ุฃููุงุช** - ุณุฃุญุฏุฏ ุฃูุถู ุงูุฃููุงุช ููู ูููุฉ
4. **ุฃุถูู ูุตุงุฆุญ** - ุณุฃูุฏู ูุตุงุฆุญ ูุชุญุณูู ุงูุฅูุชุงุฌูุฉ

๐ **ูุซุงู ุนูู ููููุฉ ูุชุงุจุฉ ุงูููุงู:**
"ูุธู ููุงูู: ุฏุฑุงุณุฉ ุงูุฑูุงุถูุงุชุ ุดุฑุงุก ุงูุจูุงูุฉุ ููุงุฑุณุฉ ุงูุฑูุงุถุฉุ ุงูุงุชุตุงู ุจุงูุทุจูุจ"

๐ฏ **ุฃู ุฃุฎุจุฑูู:**
- ูุง ูู ุงูููุงู ุงูููุฌูุฏุฉ ูู ุงูุตูุฑุฉุ
- ูู ููุงู ุฃููุงุช ูุญุฏุฏุฉ ูุฐููุฑุฉุ
- ูุง ูู ุฃููููุงุชูุ

ุณุฃููู ุณุนูุฏุงู ููุณุงุนุฏุชู ูู ุชูุธูู ููุงูู ุจุฃูุถู ุทุฑููุฉ ููููุฉ! ๐ช"""

        elif any(word in message_lower for word in ['ุญู', 'ูุงุฌุจ', 'ูุณุฃูุฉ', 'ุณุคุงู', 'homework', 'solve']):
            response = f"""๐ **ุชุญููู ุงููุงุฌุจ ูู ุงูุตูุฑุฉ - {user.first_name}**

๐ผ๏ธ **ุชู ุงุณุชูุงู ุตูุฑุฉ ุงููุงุฌุจ!**

ุฃุนุชุฐุฑุ ูุง ูููููู ูุฑุงุกุฉ ุงููุตูุต ูู ุงูุตูุฑุฉ ุญุงููุงู. ูููู ูููููู ูุณุงุนุฏุชู ุจุทุฑู ูุนุงูุฉ:

โ๏ธ **ุงูุชุจ ุงูุณุคุงู ูุตูุงู:**
- ุงูุณุฎ ูุต ุงูุณุคุงู ุฃู ุงููุณุฃูุฉ
- ุงูุชุจ ุงููุนุทูุงุช ูุงููุทููุจ
- ุญุฏุฏ ุงููุงุฏุฉ ุงูุฏุฑุงุณูุฉ

๐งฎ **ุฃูุซูุฉ ุนูู ูุง ูููููู ุญูู:**
- **ุงูุฑูุงุถูุงุช**: ูุนุงุฏูุงุชุ ููุฏุณุฉุ ุญุณุงุจ
- **ุงูููุฒูุงุก**: ููุงูููุ ูุณุงุฆู ุญุฑูุฉ
- **ุงูููููุงุก**: ูุนุงุฏูุงุช ููููุงุฆูุฉุ ุชูุงุนูุงุช
- **ุงููุบุฉ ุงูุนุฑุจูุฉ**: ููุงุนุฏุ ุฅุนุฑุงุจุ ุจูุงุบุฉ

๐ **ููููุฉ ุทุฑุญ ุงูุณุคุงู:**
"ุญู ูุฐู ุงููุณุฃูุฉ: ุฅุฐุง ูุงู ุณ + 5 = 12ุ ููุง ูููุฉ ุณุ"

๐ก **ูููุฒุงุช ุงููุณุงุนุฏุฉ:**
- ุดุฑุญ ุฎุทูุฉ ุจุฎุทูุฉ
- ุฃูุซูุฉ ุฅุถุงููุฉ ููููู
- ูุตุงุฆุญ ูุญู ูุณุงุฆู ูุดุงุจูุฉ
- ุชุจุณูุท ุงูููุงููู ุงูุตุนุจุฉ

ุงูุชุจ ุณุคุงูู ูุณุฃุณุงุนุฏู ููุฑุงู! ๐"""

        else:
            response = f"""๐ผ๏ธ **ุชุญููู ุงูุตูุฑุฉ - {user.first_name}**

ุชู ุงุณุชูุงู ุงูุตูุฑุฉ ุจูุฌุงุญ! ๐ธ

ููุฃุณูุ ุฎุฏูุฉ ุชุญููู ุงูุตูุฑ ุบูุฑ ูุชุงุญุฉ ุญุงููุงูุ ูููู ูููููู ูุณุงุนุฏุชู ุจุทุฑู ุฃุฎุฑู:

๐ก **ุงูุชุฑุงุญุงุช ูููุณุงุนุฏุฉ:**

๐ **ุฅุฐุง ูุงูุช ุงูุตูุฑุฉ ุชุญุชูู ุนูู ูุต:**
- ุงูุชุจ ุงููุต ุงูููุฌูุฏ ูู ุงูุตูุฑุฉ
- ุณุฃุณุงุนุฏู ูู ุชุญูููู ุฃู ุงูุฅุฌุงุจุฉ ุนููู

๐ **ุฅุฐุง ูุงูุช ูุงุฆูุฉ ููุงู:**
- ุงูุชุจ ุงูููุงู ูุตูุงู
- ุณุฃูุธููุง ูู ุฌุฏูู ุฒููู ูุซุงูู

๐งฎ **ุฅุฐุง ูุงูุช ูุณุฃูุฉ ุฑูุงุถูุฉ:**
- ุงูุชุจ ุงููุณุฃูุฉ ุจุงูุฃุฑูุงู ูุงูุฑููุฒ
- ุณุฃุญููุง ุฎุทูุฉ ุจุฎุทูุฉ

๐ฏ **ุฅุฐุง ููุช ุชุฑูุฏ ุชุญููู ุนุงู:**
- ุตู ูุง ุชุฑุงู ูู ุงูุตูุฑุฉ
- ุฃุฎุจุฑูู ูุง ุชุฑูุฏ ูุนุฑูุชู ุนููุง

**ูุซุงู:** "ูู ุงูุตูุฑุฉ ูุงุฆูุฉ ููุงู ุชุญุชูู ุนูู: ุฏุฑุงุณุฉุ ุชุณููุ ุฑูุงุถุฉ - ูุธููุง ูู"

ุฃูุง ููุง ููุณุงุนุฏุชู ุจุฃู ุทุฑููุฉ ููููุฉ! ๐คโจ"""

        response_time = time.time() - start_time

        # ุชุญุฏูุซ ุฅุญุตุงุฆูุงุช ุงูุงุณุชุฎุฏุงู
        self._update_usage_stats(user, response_time, True)

        return {
            'success': True,
            'response': response,
            'response_time': response_time,
            'tokens_used': self._estimate_tokens(message + response),
            'source': 'local_assistant_image'
        }
